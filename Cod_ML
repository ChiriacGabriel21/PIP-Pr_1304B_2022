#Descriptor : Clasificare de imagini
#Celula 1: 
  !pip install tensorflow
  
#Celula 2:
  #Importare de librarii
  import tensorflow as tf
  from tensorflow import keras
  from keras.models import Sequential
  from keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout
  from tensorflow.keras import layers
  from tensorflow.keras.utils import to_categorical
  import numpy as np
  import matplotlib.pyplot as plt
  plt.style.use('fivethirtyeight')
  
#Celula 3:
  #Data set

  from keras.datasets import cifar10
  (x_train, y_train), (x_test, y_test) = cifar10.load_data()

#Celula 4:


#Celula 5:
#verificare si afisare tipuri de date si variabile
print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

#Celula 6:
#Forma vectorului
print('x_train shape:', x_train.shape)
print('y_train shape:', y_train.shape)
print('x_test shape:', x_test.shape)
print('y_test shape:', y_test.shape)

#Celula 7:
#testare prima imagine
index = 10
x_train[index]

#Celula 8:
#Printare matrice ca si imagine
img = plt.imshow(x_train[index])

#Celula 9:
#eticheta imaginii
print('Eticheta imaginii este : ', y_train[index])

#Celula 10:
#Clasificarea de imagini
classification = ['Road Sign', 'automobile', 'bird', 'Traffic Light', 'deer', 'human', 'Building', 'Traffic Light', 'ship', 'truck']
#Printare clasa de imagini
print('clasa de imagini este : ', classification[y_train[index][0]])

#Celula 11:
#Conversia de eticheta in 10 numere ca intrare la un neural network
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

#Celula 12:
#Printare noua eticheta
print(y_train_one_hot)

#Celula 13:
#Printare noua eticheta a imaginii de deasupra
print('Eticheta este', y_train_one_hot[index])

#Celula 14:
#Normalizare pixele cu valorile de 0 si 1
x_train = x_train/ 255
x_test  = x_test / 255

#Celula 15:
x_train[index]

#Celula 16:
from keras.layers.pooling import MaxPooling2D
#Creare arhitectura de model
model = Sequential()

#Adaugare prim layer
model.add( Conv2D(32, (5,5), activation='relu', input_shape=(32,32,3)))

#Adaugare pooling layer
model.add(MaxPooling2D(pool_size = (2,2)))

#Adaugare convolution layer
model.add( Conv2D(32, (5,5), activation='relu'))

#Adaugare de alt pooling layer
model.add(MaxPooling2D(pool_size = (2,2)))

#Adaugare flattening layer
model.add(Flatten())

#Adaugare layer cu 1000 neuroni
model.add(Dense(1000, activation='relu'))

#Adaugare drop layer
model.add(Dropout(0.5))

#Adaugare layer cu 500 neuroni
model.add(Dense(500, activation='relu'))

#Adaugare drop layer
model.add(Dropout(0.5))

#Adaugare layer cu 250 neuroni
model.add(Dense(250, activation='relu'))

#Adaugare layer cu 10 neuroni
model.add(Dense(10, activation='softmax'))

#Celula 17:
#Compilator
model.compile(loss = 'categorical_crossentropy',optimizer='adam', metrics=['accuracy'])

#Celula 18:
#Antrenare model
hist = model.fit(x_train, y_train_one_hot,
                 batch_size= 256,
                 epochs=10, 
                 validation_split = 0.2)

#Celula 19:
#Evaluare model utilizand testul de date
model.evaluate(x_test, y_test_one_hot)[1]

#Celula 20:
#Vizualizare acuratete model
plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc = ' upper right')
plt.show

#Celula 21:
#Testare model cu exemplu
from google.colab import files
uploaded = files.upload()

#Celula 22:
#afisare imagine incarcata
new_image = plt.imread("Car_2022_05_22_21_22_17.jpg")
img = plt.imshow(new_image)

#Celula 23:
from keras.backend import resize_images
#Resize 
from skimage.transform import resize
resize_images = resize(new_image,(32,32,3))
img = plt.imshow(resize_images)

#Celula 24:
#Model de predicitie
predictions = model.predict(np.array([resize_images]))
#Afisare predicite
predictions

#Celula 25:
#Sortare predictii
list_index = [0,1,2,3,4,5,6,7,8,9]
x = predictions

for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp

#Celula 26:
  #Sortere label
  print(list_index)

#Celula 27:
#printare prima predictie
for i in range(1):
  print(classification[list_index[i]], ':', round(predictions[0][list_index[i]] * 100, 2), '%')
